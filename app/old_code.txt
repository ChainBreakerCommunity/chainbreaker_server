"""
Define Phone Model
"""
class Phone(db.Model):
    __tablename__ = "phone"
    id_phone = db.Column(db.Integer, primary_key=True)
    id_ad = db.Column(db.Integer)
    phone = db.Column(db.Integer)
    times_searched = db.Column(db.Integer)
    num_complaints = db.Column(db.Integer)
    first_service_provider = db.Column(db.String(20))
    trust = db.Column(db.String(20))
    frequent_report = db.Column(db.String(20))
    processed = db.Column(db.Boolean)


"""
Define Location Model
"""
class Location(db.Model):
    __tablename__ = "location"
    id_location = db.Column(db.Integer, primary_key=True)
    id_ad = db.Column(db.Integer)
    country = db.Column(db.String(30))
    region = db.Column(db.String(30))
    city = db.Column(db.String(30))
    place = db.Column(db.String(30))
    latitude = db.Column(db.Float)
    longitude = db.Column(db.Float)
    zoom = db.Column(db.Integer)

    #ad = relation(Ad, backref = "locations")

    def __init__(self, id_ad, country, region, city, place,
                 latitude, longitude, zoom):
        self.id_ad = id_ad
        self.country = country
        self.region = region
        self.city = city
        self.place = place
        self.latitude = latitude
        self.longitude = longitude
        self.zoom = zoom



"""
Define Feature Model
"""
class Feature(db.Model):
    __tablename__ = "feature"
    id_feature = db.Column(db.Integer, primary_key=True)
    id_ad = db.Column(db.Integer)
    age = db.Column(db.Integer)
    nationality = db.Column(db.String(20))
    ethnicity = db.Column(db.String(20))
    availability = db.Column(db.String(20))
    weight = db.Column(db.Float)
    height = db.Column(db.Float)
    hair_color = db.Column(db.String(20))
    eyes_color = db.Column(db.String(20))
    price = db.Column(db.Float)

    #ad = relation(Ad, backref = "features")

    def __init__(self, id_ad, age, nationality, ethnicity, 
                availability, weight, height, hair_color, eyes_color, 
                price):
        self.id_ad = id_ad
        self.age = age
        self.nationality = nationality
        self.ethnicity = ethnicity
        self.availability = availability
        self.weight = weight
        self.height = height
        self.hair_color = hair_color
        self.eyes_color = eyes_color
        self.price = price


dates_subquery = db.session.query(Date.id_ad) \
        .filter(and_(Date.date >= start_date, Date.date <= end_date)) \
        .group_by(Date.id_ad).having(func.count(Date.id_date) >= 1) \
        .scalar_subquery()


#dates_subquery = db.session.query(Date.id_ad) \
    #    .filter(and_(Date.date >= start_date, Date.date <= end_date)) \
    #    .group_by(Date.id_ad).having(func.count(Date.id_date) >= 1) \
    #    .scalar_subquery()
        
    total_results = db.session.query(Ad.id_ad, Phone.id_ad, Location.id_ad) \
        .filter(and_(*filters)) \
        .filter(Ad.id_ad.in_(dates_subquery)) \
        .filter(Ad.id_ad == Phone.id_ad) \
        .filter(Ad.id_ad == Location.id_ad) \
        .count()

    ads = db.session.query(Ad, Phone, Location) \
        .filter(Ad.id_ad > from_id) \
        .filter(and_(*filters)) \
        .filter(Ad.id_ad.in_(dates_subquery)) \
        .filter(Ad.id_ad == Phone.id_ad) \
        .filter(Ad.id_ad == Location.id_ad) \
        .limit(app.config["MAX_ADS_PER_REQUEST"]) \
        .all()


 Get Ad Id.
    id_ad = int(Ad.query.filter_by(id_page = id_page).first().id_ad)

    #####################
    ##   2. Date       ##
    #####################
    new_date = Date(id_ad, first_post_date)
    db.session.add(new_date)

    #####################
    ##   3. Phone      ##
    #####################
    phone = data["phone"]
    new_phone = Phone(id_ad, phone, None, None, None, None, None, 0)
    db.session.add(new_phone)

    #####################
    ##   4. Comments   ##
    #####################
    comments = data.getlist("comments")
    for comment in comments: 
        new_comment = Comment(id_ad, comment)
        db.session.add(new_comment)

    #####################
    ##   5. Location   ##
    #####################

    # Mandatory fields.
    country = data["country"]
    region = data["region"]
    city = data["city"]
    place = data["place"]
    latitude = None
    longitude = None
    zoom = None
    
    data = {"country": country, "region": region, "city": city}
    gps_data = requests.post(app.config["GEOLOCATION_SERVICE_ENDPOINT"], data = data)
    if gps_data.status_code == 200:
        gps_data = gps_data.json()
        latitude = gps_data["latitude"]
        longitude = gps_data["longitude"]
        zoom = gps_data["zoom"]
    else: 
        logging.error("An error has occurred with Geolocation Service when trying to get location of #Ad " + str(id_ad) + ".")

    #####################
    ##   6. Images     ##
    #####################
    if app.config["DATA_VERSION"] == 3: 
        # Insert images.
        pass

    # Create Location.
    new_location = Location(id_ad, country, region, city, place, 
                            latitude, longitude, zoom)
    # Add to DB.
    db.session.add(new_location)

    # Commit database.
    db.session.commit()


#############################################
## ChainBreaker Machine Learning Endpoints ##
#############################################

### Fase 1.
@app.route("/api/machine_learning/compute_nlp", methods = ["POST", "GET"])
@token_required
def compute_nlp(current_user):
    level = permission_level[current_user.permission]
    if not level >= 3:
        return jsonify({'message' : 'Cannot perform that function!'})
    return jsonify({"message": 200})

"""
This function recieves an image and returns the coordinates where there are faces.

@app.route("/api/machine_learning/get_image_faces", methods = ["POST", "GET"])
#@token_required
def get_image_faces():
    #level = permission_level[current_user.permission]
    #if not level >= 3:
    #    return jsonify({'message' : 'Cannot perform that function!'})

    # Run cv2 face detection model.
    nparr = np.fromstring(request.data, np.uint8)
    image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
    logging.info("get_image_faces called.")
    faces, confidences = cv.detect_face(image)

    data = list()
    for face in faces: 
        face_data = {}
        face_data["startX"] = str(face[0])
        face_data["startY"] = str(face[1])
        face_data["endX"] = str(face[2])
        face_data["endY"] = str(face[3])
        face_data["confidence"] = str(confidences[faces.index(face)])
        data.append(face_data)
    return jsonify({"faces_data": data}), 200
"""

### Fase 3.
@app.route("/api/machine_learning/encode_face", methods = ["POST", "GET"])
@token_required
def encode_faces(current_user):
    level = permission_level[current_user.permission]
    if not level >= 3:
        return jsonify({'message' : 'Cannot perform that function!'})
    return jsonify({"message": 200})

### Fase 3.
@app.route("/api/machine_learning/decode_face", methods = ["POST", "GET"])
@token_required
def decode_face(current_user):
    level = permission_level[current_user.permission]
    if not level >= 3:
        return jsonify({'message' : 'Cannot perform that function!'})
    return jsonify({"message": 200})

### Fase 3.
@app.route("/api/machine_learning/process_image", methods = ["POST", "GET"])
@token_required
def process_image(current_user):
    level = permission_level[current_user.permission]
    if not level >= 3:
        return jsonify({'message' : 'Cannot perform that function!'})

    # face
    # age 
    # weight 
    # height 
    # hair_color 
    # eyes_color 
    # save crop_image?

    return jsonify({"message": 200})

### Fase 3.
@app.route("/api/machine_learning/get_image_from_encoding", methods = ["POST", "GET"])
@token_required
def get_image_from_encoding(current_user):
    level = permission_level[current_user.permission]
    if not level >= 3:
        return jsonify({'message' : 'Cannot perform that function!'})
    return jsonify({"message": 200})

### Fase 1.
@app.route("/api/machine_learning/predict_ad_category", methods = ["POST", "GET"])
@token_required
def predict_ad_category(current_user):
    level = permission_level[current_user.permission]
    if not level >= 3:
        return jsonify({'message' : 'Cannot perform that function!'})
    return jsonify({"category": 0})



"""
This function format text.
"""
@app.route("/api/scraper/format_text", methods = ["POST", "GET"])
def format_text():


    import re
    import unicodedata as uc
    from string import punctuation

    def deEmojify(text):
        regrex_pattern = re.compile(pattern = "["
            u"\U0001F600-\U0001F64F"  # emoticons
            u"\U0001F300-\U0001F5FF"  # symbols & pictographs
            u"\U0001F680-\U0001F6FF"  # transport & map symbols
            u"\U0001F1E0-\U0001F1FF"  # flags (iOS)
                            "]+", flags = re.UNICODE)
        s = regrex_pattern.sub(r'',text)
        val_aux = re.sub(r'[\u200b|\u2010|\u1967]+', '', s)  
        s = uc.normalize('NFC',val_aux)
        return s
    def remove_special_characters(text):
        s = ""
        for char in text:
            if char.isalnum() or char.isspace() or char in punctuation:
                s+=char
        s_ = " ".join(s.split())
        val_aux = re.sub(r'[\u200b|\u2010]+', '', s_)  
        s = uc.normalize('NFC',val_aux)
        return s
    def tolower(text):
        return text.lower()

    data = request.values
    text = data["text"]
 
    text = deEmojify(text)
    text = remove_special_characters(text)
    text = tolower(text)

    return jsonify({"text": text})


#dates_subquery = db.session.query(Date.id_ad) \
    #    .filter(and_(Date.date >= start_date, Date.date <= end_date)) \
    #    .group_by(Date.id_ad).having(func.count(Date.id_date) >= 1) \
    #    .scalar_subquery()